# __Divide and conquer algorithm__
 분할 정복 알고리즘  

# 개념
그대로 해결할 수 없는 문제를 작은 문제로 분할하여 문제를 해결하는 것  
ex) quick sort, merge sort  
### 장점
- merge sort는 최악의 경우에도 **O(n log n)**
- 문제를 나누어 해결한다는 것 -> **문제를 병렬적으로 해결**

### 단점
- 함수의 재귀적 호출 -> **오버헤드**
- 스택에 다양한 데이터 보관 -> 스택 오버플로우, **과도한 메모리 사용**
- F(x)가 **간단** 한지에 따라 퍼포먼스 차이가 큼 (간단의 기준은 무엇?)


### 예시
    function F(x):
      if F(x)가 간단 then:
      return F(x)를 계산한 값      
    else:
      x 를 x1, x2로 분할
      F(x1)과 F(x2)를 호출
      return F(x1), F(x2)로 F(x)를 구한 값
<hr/>

# 문제
### 하노이탑
#### 설명
세 개의 기둥, 이 기둥에 꽂을 수 있는 크기가 다양한 원판.  
한 기둥에 작은 것들이 위에 있도록 순서대로 쌓여있음.  
조건 두 가지를 지키며 쌓아야 한다.  
(1) 한 번에 하나의 원판만 옮길 수 있다.  
(2) 큰 원판이 작은 원판 위에 있어서는 안된다.  
원판이 n개일 때 (2^n - 1)번의 이동으로 원판을 모두 옮길 수 있다.  

    void move(int from, int to)
    {
      printf("\nMove from %d to %d", from, to);
    }

    void hanoi(int n, int from, int by, int to)
    {
      if (n == 1)
          move(from, to);
      else
      {
        hanoi(n - 1, from, to, by);
        move(from, to);
        hanoi(n - 1, by, from, to);
      }
    }
